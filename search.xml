<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>时间复杂度反推</title>
      <link href="/2022/08/03/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%8F%8D%E6%8E%A8/"/>
      <url>/2022/08/03/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%8F%8D%E6%8E%A8/</url>
      
        <content type="html"><![CDATA[<p>$一般ACM或者笔试题的时间限制是1秒或2秒。$<br>$在这种情况下，C++代码中的操作次数控制在 10^7∼10^8 为最佳。$</p><p>$下面给出在不同数据范围下，代码的时间复杂度和算法该如何选择：$</p><p>$1.n≤30$, 指数级别, dfs+剪枝，状态压缩dp<br>$2.n≤100 =&gt; O(n^3)$，floyd，dp，高斯消元<br>$3.n≤1000 =&gt; O(n^2)，O(n^2logn)$，dp，二分，朴素版Dijkstra、朴素版Prim、Bellman-Ford<br>$4.n≤10000 =&gt; O(n∗\sqrt{n})$，块状链表、分块、莫队<br>$5.n≤100000=&gt; O(nlogn) $=&gt; 各种sort，线段树、树状数组、set/map、heap、拓扑排序dijkstra+heap_prim+heap、Kruskal、spfa、求凸包、求半平面交、二分、CDQ分治、整体二分、后缀数组、树链剖分、动态树<br>$6.n≤1000000=&gt; O(n)$, 以及常数较小的 $O(nlogn)$ 算法 =&gt; 单调队列、 hash、双指针扫描、并查集，kmp、AC自动机，常数比较小的 $O(nlogn) $的做法：sort、树状数组、heap、dijkstra、spfa<br>$7.n≤10000000 =&gt; O(n)$，双指针扫描、kmp、AC自动机、线性筛素数<br>$8.n≤10^9 =&gt; O(\sqrt{n})$，判断质数<br>$9.n≤10^18 =&gt; O(logn)$，最大公约数，快速幂，数位DP<br>$10.n≤10^{1000} =&gt; O((logn)2)$，高精度加减乘除<br>$11.n≤10^{100000} =&gt; O(logk×loglogk)$，k表示位数，高精度加减、FFT/NTT</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高级数据结构</title>
      <link href="/2022/08/02/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/08/02/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><p>树状数组是一个查询和修改复杂度都为log(n)的数据结构。主要用于数组的单点修改&amp;&amp;区间求和</p><h2 id="1-lowbit-用于查询最低位的1"><a href="#1-lowbit-用于查询最低位的1" class="headerlink" title="1.lowbit 用于查询最低位的1"></a>1.lowbit 用于查询最低位的1</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n&amp;(-n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-update-更新操作"><a href="#2-update-更新操作" class="headerlink" title="2.update  更新操作"></a>2.update  更新操作</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))<span class="comment">//x为更新的位置，y为更新操作</span></span><br><span class="line">        c[i]+=y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-query-查询"><a href="#3-query-查询" class="headerlink" title="3.query 查询"></a>3.query 查询</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        ans+=c[i];</span><br><span class="line">    &#125;<span class="keyword">return</span> ans;<span class="comment">//查询的结果就是前缀和,如果求[l,r]的和，即query(r)-query(l-1),与前缀和一致</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="敌兵布阵-单点修改，区间查询"><a href="#敌兵布阵-单点修改，区间查询" class="headerlink" title="敌兵布阵(单点修改，区间查询)"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1166">敌兵布阵(单点修改，区间查询)</a></h4><p>C国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。<br>中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:”你个死肥仔，算得这么慢，我炒你鱿鱼!”Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说：”我知错了。。。”但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的.</p><p>Input</p><p>第一行一个整数T，表示有T组数据。<br>每组数据第一行一个正整数N（N&lt;=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数$a_{i}$代表第i个工兵营地里开始时有$a_{i}$个人（1&lt;=$a_{i}$&lt;=50）。<br>接下来每行有一条命令，命令有4种形式：<br>(1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30）<br>(2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）;<br>(3)Query i j ,i和j为正整数,i&lt;=j，表示询问第i到第j个营地的总人数;<br>(4)End 表示结束，这条命令在每组数据最后出现;<br>每组数据最多有40000条命令</p><p>Output</p><p>对第i组数据,首先输出“Case i:”和回车,<br>对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。</p><p>Sample Input</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">10</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line">Query 1 3</span><br><span class="line">Add 3 6</span><br><span class="line">Query 2 7</span><br><span class="line">Sub 10 2</span><br><span class="line">Add 6 3</span><br><span class="line">Query 3 10</span><br><span class="line">End </span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">6</span><br><span class="line">33</span><br><span class="line">59</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,T; </span><br><span class="line"><span class="type">int</span> a[<span class="number">50001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t&amp;(-t);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=t;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">a[i]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i)) ans+=a[i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;   cin&gt;&gt;T;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=T;j++)&#123;</span><br><span class="line">   <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">   cin&gt;&gt;n;</span><br><span class="line">   <span class="type">int</span> z;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//初始化</span></span><br><span class="line">         cin&gt;&gt;z;</span><br><span class="line">   <span class="built_in">update</span>(i,z,n);</span><br><span class="line">   &#125;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;endl;</span><br><span class="line">       <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">   cin&gt;&gt;s;</span><br><span class="line">   <span class="keyword">if</span>(s==<span class="string">&quot;End&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">    cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&quot;Add&quot;</span>) <span class="built_in">update</span>(l,r,n);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&quot;Sub&quot;</span>) <span class="built_in">update</span>(l,-r,n);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&quot;Query&quot;</span>) cout&lt;&lt;<span class="built_in">query</span>(r)-<span class="built_in">query</span>(l<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><h2 id="1-pushup-求当前节点的和，等于其左右儿子之和"><a href="#1-pushup-求当前节点的和，等于其左右儿子之和" class="headerlink" title="1.pushup 求当前节点的和，等于其左右儿子之和"></a>1.pushup 求当前节点的和，等于其左右儿子之和</h2><h2 id="2-build-建立线段树"><a href="#2-build-建立线段树" class="headerlink" title="2.build  建立线段树"></a>2.build  建立线段树</h2><h2 id="3-query-查询-1"><a href="#3-query-查询-1" class="headerlink" title="3.query  查询"></a>3.query  查询</h2><h2 id="4-modify-修改"><a href="#4-modify-修改" class="headerlink" title="4.modify  修改"></a>4.modify  修改</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;<span class="comment">//左右儿子</span></span><br><span class="line">    <span class="type">int</span> sum;<span class="comment">//当前节点和</span></span><br><span class="line">&#125;tr[N*<span class="number">4</span>];<span class="comment">//开四倍，防止越界</span></span><br><span class="line"><span class="comment">//u表示根节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    tr[u].sum=tr[u&lt;&lt;<span class="number">1</span>].sum+tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;<span class="comment">//u&lt;&lt;1==2*u,u&lt;&lt;1|1==2*u+1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) tr[u]=&#123;l,r,w[r]&#125;;<span class="comment">//l==r表示只有一个数，sum值是其本身</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        tr[u]=&#123;l,r&#125;;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//查询</span></span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) sum+=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) sum+=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;<span class="comment">//修改元素</span></span><br><span class="line">    <span class="keyword">if</span>(tr[u].l==tr[u].r) tr[u].sum+=v;<span class="comment">//只有一个数，直接加上</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,x,v);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,v);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数列区间最大值"><a href="#数列区间最大值" class="headerlink" title="数列区间最大值"></a><a href="https://www.acwing.com/problem/content/description/1272/">数列区间最大值</a></h3><p>输入一串数字，给你 M 个询问，每次询问就给你两个数字 X,Y要求你说出 X 到 Y 这段区间内的最大数。</p><p><strong>输入格式</strong></p><p>第一行两个整数 N,M 表示数字的个数和要询问的次数；</p><p>接下来一行为 N 个数；</p><p>接下来 M 行，每行都有两个整数 X,Y</p><p><strong>输出格式</strong></p><p>输出共 M 行，每行输出一个数。</p><p><strong>数据范围</strong></p><p>$1≤N≤10^5$,<br>$1≤M≤10^6$,<br>$1≤X≤Y≤N$,<br>数列中的数字均不超过$2^{31}−1$</p><p><strong>输入样例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 2</span><br><span class="line">3 2 4 5 6 8 1 2 9 7</span><br><span class="line">1 4</span><br><span class="line">3 8</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">8</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">int</span> maxn;</span><br><span class="line">&#125;tr[<span class="number">4</span>*N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) tr[u]=&#123;l,r,w[r]&#125;;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        tr[u]=&#123;l,r&#125;;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        tr[u].maxn=<span class="built_in">max</span>(tr[u&lt;&lt;<span class="number">1</span>].maxn,tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].maxn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r) <span class="keyword">return</span> tr[u].maxn;</span><br><span class="line">    <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> maxn=INT_MIN;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) maxn=<span class="built_in">max</span>(<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r),maxn);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) maxn=<span class="built_in">max</span>(<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r),maxn);</span><br><span class="line">    <span class="keyword">return</span> maxn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,a,b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日期公式</title>
      <link href="/2022/08/01/%E6%97%A5%E6%9C%9F%E5%85%AC%E5%BC%8F/"/>
      <url>/2022/08/01/%E6%97%A5%E6%9C%9F%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="基姆拉尔森公式"><a href="#基姆拉尔森公式" class="headerlink" title="基姆拉尔森公式"></a>基姆拉尔森公式</h1><p>本公式用来计算指定的年月日是星期几</p><p>算法如下:</p><p><strong><em>W= ( d + 2m  +  3(m+1)/5  +  y  +   y/4   -   y/100  +   y/400  + 1)  %7    //C++计算公式</em></strong></p><p>在公式中d表示日期中的日数，m表示月份数，y表示年数。</p><p>w表示星期，w的取值范围是0 ~ 6，0代表星期日，1~6星期一到星期六。</p><p>注意:在公式中有个与其他公式不同的地方:</p><p>把一月和二月看成是上一年的十三月和十四月，例:如果是2004-1-10则换算成:2003-13-10来代入公式计算。</p><p>今天是 2012年 4 月 12 日星期四，编写程序，输入今天开始到 12 月 31 日之间的任意日期，输出那一天是星期几。</p><h2 id="星期几"><a href="#星期几" class="headerlink" title="星期几"></a><a href="https://www.acwing.com/problem/content/3622/">星期几</a></h2><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共两行，第一行包含一个整数 mm，表示询问日期的月份。</p><p>第二行包含一个整数 dd，表示询问日期的为该月的第几天。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出询问日期是星期几。</p><p>注意，要用英文表示。</p><p>周一到周日的英文表示如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Saturday&quot;,&quot;Sunday&quot;</span><br></pre></td></tr></table></figure><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>4≤m≤12<br>1≤d≤31<br>保证日期合法。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">20</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sunday</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">week</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">1</span>||m==<span class="number">2</span>) m=m+<span class="number">12</span>,y--;</span><br><span class="line"><span class="keyword">return</span> (d+m*<span class="number">2</span>+<span class="number">3</span>*(m+<span class="number">1</span>)/<span class="number">5</span>+y+y/<span class="number">4</span>-y/<span class="number">100</span>+y/<span class="number">400</span>+<span class="number">1</span>)%<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s[]=&#123;<span class="string">&quot;Sunday&quot;</span>,<span class="string">&quot;Monday&quot;</span>,<span class="string">&quot;Tuesday&quot;</span>,<span class="string">&quot;Wednesday&quot;</span>,<span class="string">&quot;Thursday&quot;</span>,<span class="string">&quot;Friday&quot;</span>,<span class="string">&quot;Saturday&quot;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="type">int</span> t=<span class="built_in">week</span>(<span class="number">2012</span>,x,y);</span><br><span class="line">    cout&lt;&lt;s[t];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十三号星期五"><a href="#十三号星期五" class="headerlink" title="十三号星期五"></a><a href="https://www.acwing.com/problem/content/1343/">十三号星期五</a></h2><p>十三号星期五真的很不常见吗？</p><p>每个月的十三号是星期五的频率是否比一周中的其他几天低？</p><p>请编写一个程序，计算 NN 年内每个月的 1313 号是星期日，星期一，星期二，星期三，星期四，星期五和星期六的频率。</p><p>测试的时间段将会开始于 1900 年 1 月 1 日，结束于 1900+N−1 年 12 月 31日。</p><p>一些有助于你解题的额外信息：</p><ol><li>1900 年 1 月 1 日是星期一。</li><li>在一年中，4 月、6月、9 月、11 月每个月 30 天，2 月平年 28 天，闰年 29天，其他月份每个月31天。</li><li>公历年份是 4 的倍数且不是 100的倍数的年份为闰年，例如 1992 年是闰年，1990年不是闰年。</li><li>公历年份是整百数并且是 400的倍数的也是闰年，例如1700年，1800年，1900年，2100年不是闰年，2000年是闰年。</li></ol><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含一个整数 NN。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含七个整数，整数之间用一个空格隔开，依次表示星期六，星期日，星期一，星期二，星期三，星期四，星期五在十三号出现的次数。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤400</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">36 33 34 33 35 35 34</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">week</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">1</span>||m==<span class="number">2</span>) m=m+<span class="number">12</span>,y--;</span><br><span class="line"><span class="keyword">return</span> (d+m*<span class="number">2</span>+<span class="number">3</span>*(m+<span class="number">1</span>)/<span class="number">5</span>+y+y/<span class="number">4</span>-y/<span class="number">100</span>+y/<span class="number">400</span>+<span class="number">1</span>)%<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> weeks[<span class="number">7</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1900</span>;i&lt;=<span class="number">1900</span>+x<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">12</span>;j++)&#123;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">week</span>(i,j,<span class="number">13</span>);</span><br><span class="line">weeks[t]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">6</span>;i&lt;<span class="number">13</span>;i++)&#123;</span><br><span class="line">cout&lt;&lt;weeks[i%<span class="number">7</span>]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
